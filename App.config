<?xml version="1.0" encoding="utf-8"?>
<configuration>
  <startup>
    <supportedRuntime version="v4.0" sku=".NETFramework,Version=v4.5.2" />
  </startup>
  <appSettings>
    <!-- If True the online Databases will be Backed up to *.bak files  -->
    <add key="DataBaseBackup" value="false" />
    <!-- SQL Server name for connection (Sql mixed auth expected) -->
    <add key="SqlServer" value=".\SQLEXPRESS2014" />
    <add key="SqlAdmin" value="sa" />
    <add key="SqlAdminPass" value="" />
    <!-- Folder on the disk that files should be copied to -->
    <add key="BackupDBFolder" value="C:\Backup\DB" />

    
    <!-- If set to True. The DB *.bak files will be compressed into the specified zip file. -->
    <!-- YOU NEED TO COMPRESS IF SENDING TO AZURE -->
    <add key="CompressDBBackup" value="false" />
    <!-- Full Path and Name of the zip file to use to compress the Database backup -->
    <add key="BackupDBZipPathName" value=".\databasezipfile.zip" />


    <!-- If set to True. The website file system will be zipped -->
    <add key="WebsiteBackup" value="false" />
    <!-- Root folder name to search for DNN instances, each instance found will be added to it's own zip -->
    <!-- This operation will search all sub-folders for folders containing "default.aspx", if found a DNN instance is assumed to exists on that folder -->
    <add key="WebRootFolder" value="C:\Websites" />
    <!-- Folder name of where to save the website (and other) zip files before copying to Azure -->
    <add key="WebZipFolder" value="C:\Backup\Websites" />
    <!-- Name + ext of file to identify the website installation folder, i.e. file only found in the root of the website.  (e.g. Default.aspx for DNN) -->
    <add key="filematchname" value="Default.aspx" />

   
    <!-- If set to True. IIS Settings will be exported and zipped -->
    <add key="IISSettingsBackup" value="false" />

    
    <!-- If set to true, LogFiles will be purged, Admin access usually required  -->
    <add key="ClearIISLogFiles" value="false" />
    <add key="LogFileFolder" value="C:\inetpub\logs\LogFiles" />
    <!-- This will delete any logfiles over the retension day limit -->
    <add key="LogFileRetensionDays" value="7" />

    
    <!-- If set to True. zipped files in the "WebZipFolder" will be copied to Azure and a snapshot made -->
    <add key="copytoazure" value="false" />
    <!-- Azure connection (Must be entered for checking the result files) -->
    <add key="StorageConnectionString" value="DefaultEndpointsProtocol=https;AccountName={accountname};AccountKey={accountkey}" />
    <!-- the storage container in the name of the container to be created in Azure Storage.  Usually a unique name for each server -->
    <add key="StorageContainer" value="backupservercontainer" />
    <!-- Retension of the snapshots (verisons) in minutes (1440 in 1 day) -->
    <add key="retensionminutes" value="5800" />

    <!-- If set to True. the result files in Azure will be checked and an email sent -->
    <add key="checkresultfile" value="true" />
    <!-- Check the results file has been created with the last X hours (default 12 hours, backup expected to run daily and checked within 12 hours)-->
    <add key="resultfilehours" value="12" />
    <add key="smtp" value="smtp.xxxxxxxxxx.com" />
    <add key="smtpuser" value="" />
    <add key="smtppassword" value="" />
    <add key="email" value="" />
    <!-- CSV list of storage containers to check, leave blank to check ALL containers -->
    <!-- If no result file exists, the container is ignored and a status of OK passed back for it-->
    <add key="checkcontainer" value="" />


  </appSettings>
  <system.web>
    <membership defaultProvider="ClientAuthenticationMembershipProvider">
      <providers>
        <add name="ClientAuthenticationMembershipProvider" type="System.Web.ClientServices.Providers.ClientFormsAuthenticationMembershipProvider, System.Web.Extensions, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35" serviceUri="" />
      </providers>
    </membership>
    <roleManager defaultProvider="ClientRoleProvider" enabled="true">
      <providers>
        <add name="ClientRoleProvider" type="System.Web.ClientServices.Providers.ClientRoleProvider, System.Web.Extensions, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35" serviceUri="" cacheTimeout="86400" />
      </providers>
    </roleManager>
  </system.web>
</configuration>